@{
    ViewData["Title"] = "TTTarantiruvannyaedition - Мультиплеер";
}

<div class="container">
    <h1>TTTarantiruvannyaedition</h1>
    
    <!-- Строка с информацией о подключении -->
    <div class="connection-info">
        <label>Адрес для подключения:</label>
        <input type="text" id="connectionUrl" readonly>
        <button id="copyUrl">Копировать</button>
    </div>

    <!-- Главный экран -->
    <div id="mainScreen">
        <div class="controls">
            <h2>Параметры игры</h2>
            <div class="param-group">
                <label for="n">Ширина поля (n):</label>
                <input type="number" id="n" min="3" max="20" value="8" style="width: 80px; height: 30px; font-size: 16px;">
            </div>
            <div class="param-group">
                <label for="b">Высота поля (b):</label>
                <input type="number" id="b" min="3" max="20" value="8" style="width: 80px; height: 30px; font-size: 16px;">
            </div>
            <div class="param-group">
                <label for="d">Шанс блокировки (%):</label>
                <input type="number" id="d" min="0" max="100" value="15" style="width: 80px; height: 30px; font-size: 16px;">
            </div>
            <div class="param-group">
                <label for="t">Длина линии для победы:</label>
                <input type="number" id="t" min="3" max="10" value="5" style="width: 80px; height: 30px; font-size: 16px;">
            </div>
            <div class="param-group">
                <label for="u">Прогресс захвата (ходов):</label>
                <input type="number" id="u" min="1" max="10" value="3" style="width: 80px; height: 30px; font-size: 16px;">
            </div>
            
            <h2>Выберите цвет для игры</h2>
            <div class="token-selection">
                <div class="token" style="background-color: #FF5252; width: 50px; height: 50px;" data-color="#FF5252"></div>
                <div class="token" style="background-color: #FFEB3B; width: 50px; height: 50px;" data-color="#FFEB3B"></div>
                <div class="token" style="background-color: #4CAF50; width: 50px; height: 50px;" data-color="#4CAF50"></div>
                <div class="token" style="background-color: #2196F3; width: 50px; height: 50px;" data-color="#2196F3"></div>
                <div class="token" style="background-color: #9C27B0; width: 50px; height: 50px;" data-color="#9C27B0"></div>
                <div class="token" style="background-color: #FF9800; width: 50px; height: 50px;" data-color="#FF9800"></div>
            </div>
            
            <div class="buttons">
                <button id="createLobby" style="padding: 15px 30px; font-size: 18px;">Создать лобби</button>
                <button id="showLobbies" style="padding: 15px 30px; font-size: 18px;">Присоединиться</button>
            </div>
        </div>
    </div>

    <!-- Экран списка лобби -->
    <div id="lobbiesScreen" style="display: none;">
        <div class="lobbies-section">
            <h2>Доступные лобби</h2>
            <div id="lobbiesList"></div>
            <button id="backToMain" style="padding: 10px 20px; margin-top: 15px;">Назад</button>
        </div>
    </div>

    <!-- В экране лобби добавьте кнопку выхода -->
<div id="lobbyScreen" style="display: none;">
    <div class="lobby-info">
        <h2>Лобби #<span id="lobbyIdDisplay"></span></h2>
        
        <!-- Секция для отображения подключенных игроков -->
        <div class="players-list" id="playersList">
            <h3>Игроки в лобби:</h3>
            <ul id="players"></ul>
        </div>

        <!-- Кнопка начала игры (только для создателя лобби) -->
        <div id="startGameSection" style="display: none; margin-top: 20px;">
            <button id="startGame" style="padding: 15px 30px; font-size: 18px; background: #28a745;">Начать игру</button>
        </div>

        <!-- Кнопка выхода из лобби -->
        <div style="margin-top: 20px;">
            <button id="leaveLobby" style="padding: 15px 30px; font-size: 18px; background: #dc3545;">Выйти из лобби</button>
        </div>
    </div>
</div>

    <!-- Экран игры -->
    <div id="gameScreen" style="display: none;">
        <div class="game-content">
            <div class="game-board" id="board"></div>
            <div class="status" id="status" style="font-size: 20px; padding: 15px;">Игра началась!</div>
            
            <div class="players-list">
                <h3>Игроки:</h3>
                <ul id="gamePlayers"></ul>
            </div>
        </div>
    </div>
</div>

<style>
    .container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
        font-family: Arial, sans-serif;
    }
    
    .connection-info {
        margin: 20px 0;
        padding: 15px;
        background: #f0f8ff;
        border-radius: 10px;
        display: flex;
        align-items: center;
        gap: 15px;
        font-size: 16px;
    }
    
    .connection-info label {
        font-weight: bold;
        min-width: 180px;
    }
    
    #connectionUrl {
        flex: 1;
        padding: 12px;
        font-size: 16px;
        border: 2px solid #ccc;
        border-radius: 6px;
        min-width: 300px;
    }
    
    #copyUrl {
        padding: 12px 25px;
        font-size: 16px;
        background: #2196F3;
        color: white;
        border: none;
        border-radius: 6px;
        cursor: pointer;
    }
    
    .controls {
        background: white;
        padding: 25px;
        border-radius: 15px;
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        margin: 20px 0;
    }
    
    .param-group {
        margin: 15px 0;
        display: flex;
        align-items: center;
        gap: 15px;
    }
    
    .param-group label {
        min-width: 220px;
        font-size: 16px;
        font-weight: bold;
    }
    
    .token-selection {
        display: flex;
        gap: 15px;
        margin: 20px 0;
        flex-wrap: wrap;
    }
    
    .token {
        border-radius: 50%;
        cursor: pointer;
        border: 3px solid transparent;
        transition: all 0.3s;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 20px;
    }
    
    .token.selected {
        border: 4px solid #000;
        transform: scale(1.1);
        box-shadow: 0 4px 10px rgba(0,0,0,0.3);
    }
    
    .buttons {
        margin: 25px 0;
        display: flex;
        gap: 20px;
    }
    
    .lobbies-section {
        margin-top: 20px;
        padding: 20px;
        background: white;
        border-radius: 10px;
    }
    
    .lobby-info {
        background: white;
        padding: 25px;
        border-radius: 15px;
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        margin: 20px 0;
    }
    
    .game-content {
        background: white;
        padding: 25px;
        border-radius: 15px;
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        margin: 20px 0;
    }
    
    .game-board {
        margin: 25px 0;
        display: grid;
        gap: 4px;
        justify-content: center;
    }
    
    .cell {
        width: 60px;
        height: 60px;
        border: 2px solid #333;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        background: white;
        position: relative;
        font-size: 20px;
        font-weight: bold;
        transition: all 0.2s;
    }
    
    .cell:hover {
        background: #f0f0f0;
    }
    
    .cell.blocked {
        background: #666;
        cursor: not-allowed;
    }
    
    .capture-progress {
        position: absolute;
        bottom: 0;
        left: 0;
        height: 6px;
        background: #4CAF50;
        width: 0%;
    }
    
    .players-list {
        margin-top: 25px;
        padding: 20px;
        background: #f9f9f9;
        border-radius: 10px;
    }
    
    .players-list h3 {
        margin: 0 0 15px 0;
        font-size: 18px;
    }
    
    .players-list ul {
        list-style: none;
        padding: 0;
        margin: 0;
    }
    
    .players-list li {
        padding: 12px;
        margin: 8px 0;
        background: white;
        border-radius: 6px;
        display: flex;
        align-items: center;
        gap: 12px;
        font-size: 16px;
    }
    
    .player-color {
        width: 25px;
        height: 25px;
        border-radius: 50%;
        border: 2px solid #ccc;
    }

    .lobby-item {
        padding: 15px;
        margin: 10px 0;
        background: white;
        border: 2px solid #ddd;
        border-radius: 8px;
        cursor: pointer;
        transition: all 0.2s;
    }

    .lobby-item:hover {
        border-color: #2196F3;
        transform: translateY(-2px);
    }

    .lobby-info-display {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .lobby-players {
        font-weight: bold;
        color: #2196F3;
    }
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
    console.log('Game script loaded');
    
    // Элементы DOM
    const mainScreen = document.getElementById('mainScreen');
    const lobbiesScreen = document.getElementById('lobbiesScreen');
    const lobbyScreen = document.getElementById('lobbyScreen');
    const gameScreen = document.getElementById('gameScreen');
    
    const nInput = document.getElementById('n');
    const bInput = document.getElementById('b');
    const dInput = document.getElementById('d');
    const tInput = document.getElementById('t');
    const uInput = document.getElementById('u');
    const createLobbyBtn = document.getElementById('createLobby');
    const showLobbiesBtn = document.getElementById('showLobbies');
    const backToMainBtn = document.getElementById('backToMain');
    const startGameBtn = document.getElementById('startGame');
    const boardElement = document.getElementById('board');
    const statusElement = document.getElementById('status');
    const tokenElements = document.querySelectorAll('.token');
    const playersListElement = document.getElementById('players');
    const gamePlayersElement = document.getElementById('gamePlayers');
    const connectionUrlInput = document.getElementById('connectionUrl');
    const copyUrlButton = document.getElementById('copyUrl');
    const lobbiesList = document.getElementById('lobbiesList');
    const startGameSection = document.getElementById('startGameSection');
    const lobbyIdDisplay = document.getElementById('lobbyIdDisplay');
    
    let selectedColor = null;
    let currentLobbyId = null;
    let currentGameId = null;
    let myColor = null;
    let isLobbyCreator = false;
    let pollInterval = null;
    
    // Генерируем базовый URL
    const baseUrl = window.location.origin;
    connectionUrlInput.value = baseUrl;
    
    // Копирование URL
    copyUrlButton.addEventListener('click', function() {
        connectionUrlInput.select();
        document.execCommand('copy');
        alert('URL скопирован в буфер обмена!');
    });
    
    // Обработчики выбора токена
    tokenElements.forEach(token => {
        token.addEventListener('click', () => {
            tokenElements.forEach(t => t.classList.remove('selected'));
            token.classList.add('selected');
            selectedColor = token.getAttribute('data-color');
            console.log('Selected color:', selectedColor);
        });
    });
    
    // Показать экран
    function showScreen(screenName) {
        console.log('Showing screen:', screenName);
        
        // Скрыть все экраны
        mainScreen.style.display = 'none';
        lobbiesScreen.style.display = 'none';
        lobbyScreen.style.display = 'none';
        gameScreen.style.display = 'none';
        
        // Показать нужный экран
        switch(screenName) {
            case 'main':
                mainScreen.style.display = 'block';
                statusElement.textContent = 'Выберите цвет и нажмите "Создать лобби" или "Присоединиться"';
                break;
            case 'lobbies':
                lobbiesScreen.style.display = 'block';
                break;
            case 'lobby':
                lobbyScreen.style.display = 'block';
                if (currentLobbyId) {
                    lobbyIdDisplay.textContent = currentLobbyId;
                }
                break;
            case 'game':
                gameScreen.style.display = 'block';
                boardElement.style.display = 'grid';
                break;
        }
    }
    
    // Создание лобби
    createLobbyBtn.addEventListener('click', async () => {
        if (!selectedColor) {
            alert('Пожалуйста, выберите цвет для игры!');
            return;
        }
        
        try {
            console.log('Creating lobby...');
            const params = {
                Width: parseInt(nInput.value),
                Height: parseInt(bInput.value),
                BlockChance: parseInt(dInput.value),
                WinLength: parseInt(tInput.value),
                CaptureProgress: parseInt(uInput.value)
            };
            
            const response = await fetch('/Game/CreateLobby', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(params)
            });
            
            const result = await response.json();
            console.log('Create lobby result:', result);
            
            if (!result.success) {
                alert('Ошибка создания лобби: ' + result.error);
                return;
            }
            
            // Присоединяемся к созданному лобби
            console.log('Joining lobby:', result.lobbyId);
            const joinResponse = await fetch('/Game/JoinLobby', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    LobbyId: result.lobbyId,
                    Color: selectedColor,
                    Name: `Игрок ${selectedColor}`
                })
            });
            
            const joinResult = await joinResponse.json();
            console.log('Join lobby result:', joinResult);
            
            if (joinResult.success) {
                currentLobbyId = result.lobbyId;
                myColor = selectedColor;
                isLobbyCreator = true;
                
                showScreen('lobby');
                statusElement.textContent = 'Лобби создано! Ожидаем игроков...';
                connectionUrlInput.value = `${baseUrl}?lobbyId=${currentLobbyId}`;
                startGameSection.style.display = 'block';
                
                startLobbyPolling();
            } else {
                alert('Ошибка присоединения: ' + joinResult.error);
            }
        } catch (error) {
            console.error('Ошибка:', error);
            alert('Произошла ошибка при создании лобби');
        }
    });
    
    // Показать список лобби
    showLobbiesBtn.addEventListener('click', async () => {
        try {
            console.log('Loading lobbies...');
            const response = await fetch('/Game/ListLobbies');
            const lobbies = await response.json();
            console.log('Lobbies:', lobbies);
            
            lobbiesList.innerHTML = '';
            
            if (lobbies.length === 0) {
                lobbiesList.innerHTML = '<p>Нет доступных лобби</p>';
            } else {
                lobbies.forEach(lobby => {
                    const lobbyItem = document.createElement('div');
                    lobbyItem.className = 'lobby-item';
                    lobbyItem.innerHTML = `
                        <div class="lobby-info-display">
                            <span>Лобби #${lobby.id} (${lobby.width}x${lobby.height})</span>
                            <span class="lobby-players">${lobby.playerCount}/6 игроков</span>
                        </div>
                        <div>Победа: ${lobby.winLength} в ряд, Захват: ${lobby.captureProgress} хода</div>
                    `;
                    
                    lobbyItem.addEventListener('click', () => joinExistingLobby(lobby.id));
                    lobbiesList.appendChild(lobbyItem);
                });
            }
            
            showScreen('lobbies');
        } catch (error) {
            console.error('Ошибка получения списка лобби:', error);
        }
    });
    
    // Назад к главному меню
    backToMainBtn.addEventListener('click', () => {
        console.log('Returning to main menu');
        showScreen('main');
    });
    
    // Присоединение к существующему лобби
    async function joinExistingLobby(lobbyId) {
        if (!selectedColor) {
            alert('Пожалуйста, выберите цвет!');
            return;
        }
        
        try {
            console.log('Joining existing lobby:', lobbyId);
            const joinResponse = await fetch('/Game/JoinLobby', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    LobbyId: lobbyId,
                    Color: selectedColor,
                    Name: `Игрок ${selectedColor}`
                })
            });
            
            const joinResult = await joinResponse.json();
            console.log('Join result:', joinResult);
            
            if (joinResult.success) {
                currentLobbyId = lobbyId;
                myColor = selectedColor;
                isLobbyCreator = false;
                
                showScreen('lobby');
                statusElement.textContent = 'Присоединились к лобби! Ожидаем начала игры...';
                startGameSection.style.display = 'none';
                
                // Немедленно запрашиваем состояние лобби
                await updateLobbyState();
                startLobbyPolling();
            } else {
                alert('Не удалось присоединиться к лобби: ' + joinResult.error);
            }
        } catch (error) {
            console.error('Ошибка присоединения к лобби:', error);
        }
    }
    
    // Обновление состояния лобби
    async function updateLobbyState() {
        try {
            console.log('Updating lobby state...');
            const response = await fetch('/Game/LobbyState');
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const lobbyData = await response.json();
            console.log('Lobby state:', lobbyData);
            
            if (lobbyData.error) {
                console.error('Lobby error:', lobbyData.error);
                return;
            }
            
            // Обновляем список игроков
            updatePlayersList(lobbyData.players || []);
            
        } catch (error) {
            console.error('Ошибка обновления состояния лобби:', error);
        }
    }
    // Кнопка выхода из лобби
const leaveLobbyBtn = document.getElementById('leaveLobby');
if (leaveLobbyBtn) {
    leaveLobbyBtn.addEventListener('click', async () => {
        try {
            const response = await fetch('/Game/LeaveLobby', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' }
            });
            
            const result = await response.json();
            if (result.success) {
                // Полная очистка состояния
                await resetSession();
                showScreen('main');
            }
        } catch (error) {
            console.error('Ошибка выхода из лобби:', error);
        }
    });
}

// Функция сброса сессии
async function resetSession() {
    try {
        await fetch('/Game/ResetSession', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' }
        });
        
        // Сброс локальных переменных
        currentLobbyId = null;
        currentGameId = null;
        myColor = null;
        isLobbyCreator = false;
        
        if (pollInterval) clearInterval(pollInterval);
        
        console.log('Session reset complete');
    } catch (error) {
        console.error('Ошибка сброса сессии:', error);
    }
}

// При загрузке страницы сбрасываем сессию

    // Запуск игры
    startGameBtn.addEventListener('click', async () => {
        try {
            console.log('Starting game...');
            const response = await fetch('/Game/StartGame', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ LobbyId: currentLobbyId })
            });
            
            const result = await response.json();
            console.log('Start game result:', result);
            
            if (result.success) {
                currentGameId = result.gameId;
                statusElement.textContent = 'Игра начинается!';
                
                // Немедленно переключаемся на экран игры
                showScreen('game');
                startGamePolling();
            } else {
                alert('Не удалось начать игру: ' + result.error);
            }
        } catch (error) {
            console.error('Ошибка начала игры:', error);
            alert('Ошибка при запуске игры');
        }
    });
    
    // Опрос состояния лобби
    function startLobbyPolling() {
        if (pollInterval) clearInterval(pollInterval);
        
        console.log('Starting lobby polling');
        pollInterval = setInterval(async () => {
            try {
                console.log('Polling lobby state...');
                const response = await fetch('/Game/LobbyState');
                
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const lobbyData = await response.json();
                console.log('Lobby poll result:', lobbyData);
                
                if (lobbyData.error) {
                    console.error('Lobby error:', lobbyData.error);
                    if (lobbyData.error.includes("not found") || lobbyData.error.includes("No lobby")) {
                        statusElement.textContent = "Лобби было закрыто";
                        clearInterval(pollInterval);
                        showScreen('main');
                    }
                    return;
                }
                
                // Обновляем список игроков
                updatePlayersList(lobbyData.players || []);
                
                // Если игра началась
                if (lobbyData.status === 'GameStarted' && lobbyData.gameId) {
                    console.log('Game started! Switching to game screen');
                    currentGameId = lobbyData.gameId;
                    clearInterval(pollInterval);
                    showScreen('game');
                    startGamePolling();
                }
            } catch (error) {
                console.error('Ошибка опроса лобби:', error);
            } if (lobbyData.error) {
    console.error('Lobby error:', lobbyData.error);
    if (lobbyData.error.includes("not found") || 
        lobbyData.error.includes("expired") ||
        lobbyData.error.includes("not in this lobby")) {
        statusElement.textContent = "Лобби было закрыто или вы были отключены";
        clearInterval(pollInterval);
        
        // Очищаем сессию
        await resetSession();
        showScreen('main');
    }
    return;
}
        }, 2000);
        
    }
    
    // Опрос состояния игры
    function startGamePolling() {
        if (pollInterval) clearInterval(pollInterval);
        
        console.log('Starting game polling');
        pollInterval = setInterval(async () => {
            try {
                console.log('Polling game state...');
                const response = await fetch('/Game/GameState');
                
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const gameData = await response.json();
                console.log('Game poll result:', gameData);
                
                if (gameData.error) {
                    console.error('Game error:', gameData.error);
                    return;
                }
                
                // Обновляем доску
                updateBoard(gameData);
                
                // Обновляем статус
                updateStatus(gameData);
                
                // Обновляем список игроков
                updateGamePlayersList(gameData.players || []);
                
            } catch (error) {
                console.error('Ошибка опроса игры:', error);
            }if (gameData.error) {
    console.error('Game error:', gameData.error);
    if (gameData.error.includes("not found") || 
        gameData.error.includes("expired") ||
        gameData.error.includes("not in this game")) {
        statusElement.textContent = "Игра была завершена или вы были отключены";
        clearInterval(pollInterval);
        
        // Очищаем сессию
        await resetSession();
        showScreen('main');
    }
    return;
}
        }, 2000);
    }
    
    // Обновление списка игроков в лобби
    function updatePlayersList(players) {
        console.log('Updating players list:', players);
        playersListElement.innerHTML = '';
        
        if (players && players.length > 0) {
            players.forEach(player => {
                const li = document.createElement('li');
                
                const colorSpan = document.createElement('span');
                colorSpan.className = 'player-color';
                colorSpan.style.backgroundColor = player.color;
                
                const nameSpan = document.createElement('span');
                nameSpan.textContent = player.name || `Игрок ${player.color}`;
                
                li.appendChild(colorSpan);
                li.appendChild(nameSpan);
                playersListElement.appendChild(li);
            });
        } else {
            playersListElement.innerHTML = '<li>Нет игроков в лобби</li>';
        }
    }
    
    // Обновление списка игроков в игре
    function updateGamePlayersList(players) {
        console.log('Updating game players list:', players);
        gamePlayersElement.innerHTML = '';
        
        if (players && players.length > 0) {
            players.forEach(player => {
                const li = document.createElement('li');
                
                const colorSpan = document.createElement('span');
                colorSpan.className = 'player-color';
                colorSpan.style.backgroundColor = player.color;
                
                const nameSpan = document.createElement('span');
                nameSpan.textContent = player.name || `Игрок ${player.color}`;
                
                li.appendChild(colorSpan);
                li.appendChild(nameSpan);
                gamePlayersElement.appendChild(li);
            });
        } else {
            gamePlayersElement.innerHTML = '<li>Нет игроков</li>';
        }
    }
    
    // Обновление игровой доски
    function updateBoard(gameData) {
        if (!gameData || !gameData.cells) {
            console.log('No game data for board update');
            return;
        }
        
        console.log('Updating game board');
        boardElement.innerHTML = '';
        const width = gameData.width || 5;
        const height = gameData.height || 5;
        
        boardElement.style.gridTemplateColumns = `repeat(${width}, 60px)`;
        
        for (let y = 0; y < height; y++) {
            for (let x = 0; x < width; x++) {
                const cellIndex = y * width + x;
                const cellData = gameData.cells[cellIndex];
                const cell = document.createElement('div');
                cell.className = 'cell' + (cellData?.blocked ? ' blocked' : '');
                cell.dataset.x = x;
                cell.dataset.y = y;
                
                if (cellData && !cellData.blocked && cellData.owner === null) {
                    cell.addEventListener('click', handleCellClick);
                }
                
                if (cellData && cellData.owner) {
                    const owner = gameData.players?.find(p => p.id === cellData.owner);
                    if (owner) {
                        cell.style.backgroundColor = owner.color;
                        cell.textContent = '✓';
                        cell.style.color = 'white';
                    }
                }
                
                const progressBar = document.createElement('div');
                progressBar.className = 'capture-progress';
                progressBar.style.width = cellData ? `${(cellData.progress / gameData.captureProgress) * 100}%` : '0%';
                cell.appendChild(progressBar);
                
                boardElement.appendChild(cell);
            }
        }
    }
    
    // Обновление статуса игры
    function updateStatus(gameData) {
        if (!gameData) return;
        
        if (gameData.gameOver) {
            if (gameData.winner) {
                const winner = gameData.players?.find(p => p.id === gameData.winner);
                statusElement.textContent = winner ? `🎉 Победил ${winner.name}! 🎉` : '🎉 Игра окончена! 🎉';
                statusElement.style.background = '#d4edda';
                statusElement.style.color = '#155724';
            } else {
                statusElement.textContent = '🤝 Ничья!';
                statusElement.style.background = '#e2e3e5';
                statusElement.style.color = '#383d41';
            }
            clearInterval(pollInterval);
        } else if (gameData.players && gameData.players.length > 0) {
            const currentPlayer = gameData.players[gameData.currentPlayerIndex || 0];
            if (currentPlayer) {
                statusElement.textContent = `🎮 Ход: ${currentPlayer.name}`;
                statusElement.style.background = '#d1ecf1';
                statusElement.style.color = '#0c5460';
                
                if (currentPlayer.color === myColor) {
                    statusElement.textContent += ' (Ваш ход! 👆)';
                    statusElement.style.background = '#fff3cd';
                    statusElement.style.color = '#856404';
                }
            }
        }
    }
    
    // Обработчик клика по клетке
    async function handleCellClick(e) {
        if (!currentGameId) return;
        
        const x = parseInt(e.target.dataset.x);
        const y = parseInt(e.target.dataset.y);
        
        try {
            console.log('Making move:', x, y);
            const response = await fetch('/Game/MakeMove', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ X: x, Y: y })
            });
            
            const result = await response.json();
            console.log('Move result:', result);
            
            if (!result.success) {
                alert('Неверный ход! ' + (result.error || ''));
            }
        } catch (error) {
            console.error('Ошибка хода:', error);
        }
    }
    
    // Проверка параметров URL
    function checkUrlParams() {
        const urlParams = new URLSearchParams(window.location.search);
        const lobbyId = urlParams.get('lobbyId');
        
        if (lobbyId) {
            connectionUrlInput.value = window.location.href;
            statusElement.textContent = 'Найдена ссылка на лобби. Выберите цвет и нажмите "Присоединиться"';
        }
    }
    
    // Инициализация
    checkUrlParams();
    showScreen('main');
    
    // Глобальная обработка ошибок
    window.addEventListener('error', function(e) {
        console.error('Global error:', e.error);
    });
    
    window.addEventListener('unhandledrejection', function(e) {
        console.error('Unhandled promise rejection:', e.reason);
    });
});
resetSession();
</script>